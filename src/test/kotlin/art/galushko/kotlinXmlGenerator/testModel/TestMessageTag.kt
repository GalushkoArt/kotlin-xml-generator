package art.galushko.kotlinXmlGenerator.testModel

import art.galushko.kotlinXmlGenerator.model.Tag
import art.galushko.kotlinXmlGenerator.model.TagBuilder
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.AnonymousTag
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.AnonymousTag.AnonymousBuilder
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.SomeAnonymousTag
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.SomeAnonymousTag.SomeAnonymousBuilder
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

/**
 * This file was generated by art.galushko.kotlinXmlGenerator.generators.TagClassGenerator
 * Your changes will be lost
 */
@Suppress("RedundantVisibilityModifier", "PropertyName")
public class TestMessageTag : Tag("test") {
  public var TestValue: String? = null

  public var TestStrings: List<String>? = null

  public var ReusedList: List<ReusedTagTag>? = null

  public var Anonymous: AnonymousTag? = null

  public var SomeAnonymous: List<SomeAnonymousTag>? = null

  @Suppress("TestFunctionName", "MoveLambdaOutsideParentheses")
  public class TestMessageBuilder(
    public override val tag: TestMessageTag,
  ) : TagBuilder(tag) {
    public fun random_attribute(provider: () -> String) = apply({
       tag._attributes["random-attribute"] = provider()
    })

    public fun TestValue(provider: () -> String?) = apply({
       tag.TestValue = provider()
    })

    public fun TestStrings(provider: () -> String) = apply({
       tag.TestStrings = (tag.TestStrings ?: listOf()) + provider()
    })

    public fun <T> TestStrings(list: List<T>, provider: (T) -> String) = apply({
       tag.TestStrings = (tag.TestStrings ?: listOf()) + list.map(provider)
    })

    public fun EmptyTestStrings() = apply({
       tag.TestStrings = emptyList()
    })

    public fun ReusedList(provider: ReusedTagTag.ReusedTagBuilder.() -> Unit) = apply({
       tag.ReusedList = (tag.ReusedList ?: listOf()) + ReusedTagTag.ReusedTagObject.invoke(provider)
    })

    public fun <T> ReusedList(list: List<T>, provider: ReusedTagTag.ReusedTagBuilder.(T) -> Unit) =
        apply({
       tag.ReusedList = (tag.ReusedList ?: listOf()) + list.map({
        ReusedTagTag.ReusedTagObject.invokeWithParameter(it, provider) })
    })

    public fun EmptyReusedList() = apply({
       tag.ReusedList = emptyList()
    })

    public fun Anonymous(provider: AnonymousTag.AnonymousBuilder.() -> Unit) = apply({
       tag.Anonymous = AnonymousTag.AnonymousObject.invoke(provider)
    })

    public fun SomeAnonymous(provider: SomeAnonymousTag.SomeAnonymousBuilder.() -> Unit) = apply({
       tag.SomeAnonymous = (tag.SomeAnonymous ?: listOf()) +
        SomeAnonymousTag.SomeAnonymousObject.invoke(provider)
    })

    public fun <T> SomeAnonymous(list: List<T>,
        provider: SomeAnonymousTag.SomeAnonymousBuilder.(T) -> Unit) = apply({
       tag.SomeAnonymous = (tag.SomeAnonymous ?: listOf()) + list.map({
        SomeAnonymousTag.SomeAnonymousObject.invokeWithParameter(it, provider) })
    })

    public fun EmptySomeAnonymous() = apply({
       tag.SomeAnonymous = emptyList()
    })
  }

  public object TestMessageObject {
    public operator fun invoke(initialize: TestMessageBuilder.() -> Unit): TestMessageTag =
        TestMessageBuilder(TestMessageTag()).apply(initialize).tag

    @Suppress("MoveLambdaOutsideParentheses")
    public fun <T> invokeWithParameter(parameter: T, initialize: TestMessageBuilder.(T) -> Unit):
        TestMessageTag = TestMessageBuilder(TestMessageTag()).also({ it.initialize(parameter) }).tag

    public fun build(provider: TestMessageBuilder.() -> TestMessageBuilder): TestMessageTag =
        TestMessageBuilder(TestMessageTag()).provider().tag
  }
}
