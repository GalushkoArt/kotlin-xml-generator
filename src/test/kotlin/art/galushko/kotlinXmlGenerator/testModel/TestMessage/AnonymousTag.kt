package art.galushko.kotlinXmlGenerator.testModel.TestMessage

import art.galushko.kotlinXmlGenerator.model.Tag
import art.galushko.kotlinXmlGenerator.model.TagBuilder
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.Anonymous.InnerAnonymousTag
import art.galushko.kotlinXmlGenerator.testModel.TestMessage.Anonymous.InnerAnonymousTag.InnerAnonymousBuilder
import kotlin.String
import kotlin.Suppress
import kotlin.Unit

/**
 * This file was generated by art.galushko.kotlinXmlGenerator.generators.TagClassGenerator
 * Your changes will be lost
 */
@Suppress("RedundantVisibilityModifier", "PropertyName")
public class AnonymousTag : Tag("test") {
  public var `class`: String? = null

  public var InnerAnonymous: InnerAnonymousTag? = null

  @Suppress("TestFunctionName", "MoveLambdaOutsideParentheses")
  public class AnonymousBuilder(
    public override val tag: AnonymousTag,
  ) : TagBuilder(tag) {
    public fun `class`(provider: () -> String?) = apply({
       tag.`class` = provider()
    })

    public fun InnerAnonymous(provider: InnerAnonymousTag.InnerAnonymousBuilder.() -> Unit) =
        apply({
       tag.InnerAnonymous = InnerAnonymousTag.InnerAnonymousObject.invoke(provider)
    })
  }

  public object AnonymousObject {
    public operator fun invoke(initialize: AnonymousBuilder.() -> Unit): AnonymousTag =
        AnonymousBuilder(AnonymousTag()).apply(initialize).tag

    @Suppress("MoveLambdaOutsideParentheses")
    public fun <T> invokeWithParameter(parameter: T, initialize: AnonymousBuilder.(T) -> Unit):
        AnonymousTag = AnonymousBuilder(AnonymousTag()).also({ it.initialize(parameter) }).tag

    public fun build(provider: AnonymousBuilder.() -> AnonymousBuilder): AnonymousTag =
        AnonymousBuilder(AnonymousTag()).provider().tag
  }
}
